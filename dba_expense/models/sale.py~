from odoo import api, fields, models, _
from odoo.exceptions import UserError

class department(models.Model):
    _name = 'department.details'
    name = fields.Char('Name')


class crew_members(models.Model):
    _name = 'crew.members'
    
    partner_id = fields.Many2one('res.partner',string="Crew Member / Staff #", required=1)
    staff_no = fields.Char(string="Staff No")
    function = fields.Char(string="Rank") 
    street = fields.Char(string="Address")
    phone = fields.Char(string="Phone")
    pickup_no = fields.Char(string="Pickup No")
    reporting_time = fields.Float(string="Reporting Time")
    boardind_time = fields.Float(string="Boarding Time")
    order_id = fields.Many2one('sale.order',string="Order")
    
    
    _sql_constraints = [
        ('number_uniq', 'unique(partner_id, order_id)', 'Crew Member must be unique per Quotation/Sale Order!'),
    ]
    
    @api.onchange('partner_id')
    def _onchange_partner_id(self):
    	address = ''
    	if self.partner_id.street:
    		address += self.partner_id.street
    	if self.partner_id.street2:
    		address = address + ', ' + self.partner_id.street2
    	if self.partner_id.city:
    		address = address + ', ' + self.partner_id.city
    	if self.partner_id.state_id:
    		address = address + ', ' + self.partner_id.state_id.name
    	if self.partner_id.zip:
    		address = address + ', ' + self.partner_id.zip
    	if self.partner_id.country_id:
    		address = address + ', ' + self.partner_id.country_id.name
			
        values = {
            'street': address,
            'phone': self.partner_id.phone or False,
            'function' : self.partner_id.function or False,
            'staff_no' : self.partner_id.staff_no or False
        }
        self.update(values)
	
	
    def get_time_format(self,time):
    	result = '{0:02.0f}:{1:02.0f}'.format(*divmod(time * 60, 60))
    	return result

class agroAddField(models.Model):
    _inherit = 'sale.order'

    tour_type = fields.Selection([('1', 'Drop'), ('2', 'Pickup'), ('3', 'Dual Package'),('4', 'One way empty'),('5', 'Scheduled'),('6', 'Day Hire'),('7', 'Other')],
                                    string='Tour Type')
    vehicle = fields.Many2one('fleet.vehicle', string='Vehicle', readonly=True,
                                  states={'draft': [('readonly', False)], 'sent': [('readonly', False)]},
                                  change_default=True, index=True, track_visibility='always')

    driver = fields.Many2one('res.partner', string='Driver', readonly=True,
                                  states={'draft': [('readonly', False)], 'sent': [('readonly', False)]},
                                  change_default=True, index=True, track_visibility='always')
    odo_start = fields.Char(string='ODO Metre Start')
    odo_stop = fields.Char(string='ODO Metre End')
    mileage = fields.Char(string='Mileage')
    payment = fields.Selection(
        [('1', 'Cash'), ('2', 'Bank'), ('3', 'Credit')],
        string='Payment Method')


    pick_time = fields.Datetime(string='Picking Time')
    pick_add = fields.Char(string='Picking Address')
    drop_time = fields.Datetime(string='Dropoff Time')
    drop_add = fields.Char(string='Dropoff Address')
    flt_no = fields.Char(string='FLT No')
    fax = fields.Char(string='No Pax')
    req_time = fields.Datetime(string='Req Time')
    root = fields.Char(string='Root')
    shift = fields.Char(string='Shift')
    conductor = fields.Char(string='Conductor')
    department = fields.Many2one('department.details', string='Department', readonly=True,
                                  states={'draft': [('readonly', False)], 'sent': [('readonly', False)]},
                                  change_default=True, index=True, track_visibility='always')
    requested_by = fields.Char(string='Requested by')

    passenger_name = fields.Char(string='Passenger Name')
    contact_num = fields.Char(string='Contact Number')

    log_no = fields.Char(string='Log No')
    route = fields.Char(string='Route')
    shift = fields.Char(string='Shift')

    vehicle_type = fields.Selection([('1', 'Limo'), ('2', 'Echo'), ('3', 'Standard'),('4', 'Semi'),('5', '4WD')],string='Vehicle Type')
    destination = fields.Char(string='Destination')
    co_ordinator = fields.Char(string='Co-ordinator')
    cashiers_name = fields.Char(string='Cashiers name')

    requested_by = fields.Char(string='Requested By')
    department_req = fields.Char(string='Department Requested By')
    place = fields.Char(string='Place Of visit')
    issuing_officer = fields.Char(string='Name of Issuing Officer')
    det_running = fields.Char(string='Details Of running')

    running_chart = fields.Char(string='Running Chart No')
    time = fields.Char(string='Time')
    voucher = fields.Char(string='Voucher No')
    details = fields.Char(string='Details')
    name_co = fields.Char(string='Name of Co-ordinator')

    log_no_1 = fields.Char(string='Log No')
    running_det = fields.Char(string='Running Details')

    garage = fields.Char(string='Garage Leaving Time')
    reported = fields.Char(string='Reported Time at KIA')



    crew_members_ids = fields.One2many('crew.members','order_id', string='Crew Members',
                                 states={'cancel': [('readonly', False)], 'done': [('readonly', True)]}, copy=True)
    crew_type = fields.Selection([('Cabin Crew M-D', 'Cabin Crew M-D'), ('Technical Staff', 'Technical Staff')],
        string='Crew Type')
    trip_type = fields.Selection([('Departure', 'Departure'), ('Arrival', 'Arrival')],
                                 string='Trip Type')
                                 
    
    def get_total_kms(self,stop,start):
    	total_kms = int(stop) - int(start)
    	return total_kms

class accountInvoice(models.Model):
    _inherit = 'account.invoice'

